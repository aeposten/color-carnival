{"ast":null,"code":"var _jsxFileName = \"/Users/amyposten/Desktop/Dev/color-carnival/kiwico-homework-amy-posten/client/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport ColorList from \"./components/ColorList\";\nimport Winner from \"./components/Winner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //Need state for Winning Color (RGB) , and 6 other colors\n  const NUMCOLORS = 6;\n  let winningIndex;\n  const [gameColors, setGameColors] = useState([]);\n  const [winningColor, setWinningColor] = useState({});\n  function getRandomRGB() {\n    return Math.floor(Math.random() * 256);\n  }\n  function getNewColor() {\n    let newColor = {\n      red: getRandomRGB(),\n      green: getRandomRGB(),\n      blue: getRandomRGB(),\n      isWinner: false\n    };\n    return newColor;\n  }\n  function getWinningIndex() {\n    winningIndex = Math.floor(Math.random() * NUMCOLORS);\n    return winningIndex;\n  }\n  function startGame() {\n    getWinningIndex();\n    const newColors = [];\n    let winner;\n    for (let i = 0; i < NUMCOLORS; i++) {\n      newColors.push(getNewColor());\n      if (i === winningIndex) {\n        winner = newColors[winningIndex];\n        newColors[winningIndex].isWinner = true;\n      }\n    }\n    setGameColors([...gameColors, ...newColors]);\n    setWinningColor({\n      ...winningColor,\n      ...winner\n    });\n  }\n  function resetGame() {\n    window.location.reload(false);\n  }\n  useEffect(() => {\n    startGame();\n  }, []);\n  console.log(gameColors);\n  console.log(winningIndex);\n  console.log(winningColor);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(ColorList, {\n      gameColors: gameColors,\n      winningColor: winningColor,\n      resetGame: resetGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dA2mUvCenaeUP/+H4aXrv/1Iq1I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","ColorList","Winner","App","NUMCOLORS","winningIndex","gameColors","setGameColors","winningColor","setWinningColor","getRandomRGB","Math","floor","random","getNewColor","newColor","red","green","blue","isWinner","getWinningIndex","startGame","newColors","winner","i","push","resetGame","window","location","reload","console","log"],"sources":["/Users/amyposten/Desktop/Dev/color-carnival/kiwico-homework-amy-posten/client/src/App.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport ColorList from \"./components/ColorList\";\nimport Winner from \"./components/Winner\";\n\nfunction App() {\n  //Need state for Winning Color (RGB) , and 6 other colors\n  const NUMCOLORS = 6;\n  let winningIndex;\n  const [gameColors, setGameColors] = useState([]);\n  const [winningColor, setWinningColor] = useState({});\n\n  function getRandomRGB() {\n    return Math.floor(Math.random() * 256);\n  }\n\n  function getNewColor() {\n    let newColor = {\n      red: getRandomRGB(),\n      green: getRandomRGB(),\n      blue: getRandomRGB(),\n      isWinner: false\n    };\n    return newColor;\n  }\n  function getWinningIndex() {\n    winningIndex = (Math.floor(Math.random() * NUMCOLORS))\n    return winningIndex\n  }\n\n  function startGame() {\n    getWinningIndex()\n    const newColors = [];\n    let winner;\n\n    for (let i = 0; i < NUMCOLORS; i++) {\n      newColors.push(getNewColor());\n      if (i === winningIndex) {\n        winner = newColors[winningIndex];\n        newColors[winningIndex].isWinner = true\n      }\n    }\n   setGameColors([...gameColors, ...newColors]);\n    setWinningColor({...winningColor, ...winner})\n  }\n\n  function resetGame() {\n    window.location.reload(false);\n  }\n\n  useEffect(() => {\n    startGame();\n  }, []);\n  console.log(gameColors)\n  console.log(winningIndex)\n  console.log(winningColor);\n  return (\n    <div className=\"App\">\n      <ColorList gameColors={gameColors} winningColor={winningColor} resetGame={resetGame}/>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,MAAM,MAAM,qBAAqB;AAAC;AAEzC,SAASC,GAAG,GAAG;EAAA;EACb;EACA,MAAMC,SAAS,GAAG,CAAC;EACnB,IAAIC,YAAY;EAChB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEpD,SAASW,YAAY,GAAG;IACtB,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC;EACxC;EAEA,SAASC,WAAW,GAAG;IACrB,IAAIC,QAAQ,GAAG;MACbC,GAAG,EAAEN,YAAY,EAAE;MACnBO,KAAK,EAAEP,YAAY,EAAE;MACrBQ,IAAI,EAAER,YAAY,EAAE;MACpBS,QAAQ,EAAE;IACZ,CAAC;IACD,OAAOJ,QAAQ;EACjB;EACA,SAASK,eAAe,GAAG;IACzBf,YAAY,GAAIM,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGT,SAAS,CAAE;IACtD,OAAOC,YAAY;EACrB;EAEA,SAASgB,SAAS,GAAG;IACnBD,eAAe,EAAE;IACjB,MAAME,SAAS,GAAG,EAAE;IACpB,IAAIC,MAAM;IAEV,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpB,SAAS,EAAEoB,CAAC,EAAE,EAAE;MAClCF,SAAS,CAACG,IAAI,CAACX,WAAW,EAAE,CAAC;MAC7B,IAAIU,CAAC,KAAKnB,YAAY,EAAE;QACtBkB,MAAM,GAAGD,SAAS,CAACjB,YAAY,CAAC;QAChCiB,SAAS,CAACjB,YAAY,CAAC,CAACc,QAAQ,GAAG,IAAI;MACzC;IACF;IACDZ,aAAa,CAAC,CAAC,GAAGD,UAAU,EAAE,GAAGgB,SAAS,CAAC,CAAC;IAC3Cb,eAAe,CAAC;MAAC,GAAGD,YAAY;MAAE,GAAGe;IAAM,CAAC,CAAC;EAC/C;EAEA,SAASG,SAAS,GAAG;IACnBC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,KAAK,CAAC;EAC/B;EAEA7B,SAAS,CAAC,MAAM;IACdqB,SAAS,EAAE;EACb,CAAC,EAAE,EAAE,CAAC;EACNS,OAAO,CAACC,GAAG,CAACzB,UAAU,CAAC;EACvBwB,OAAO,CAACC,GAAG,CAAC1B,YAAY,CAAC;EACzByB,OAAO,CAACC,GAAG,CAACvB,YAAY,CAAC;EACzB,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,uBAClB,QAAC,SAAS;MAAC,UAAU,EAAEF,UAAW;MAAC,YAAY,EAAEE,YAAa;MAAC,SAAS,EAAEkB;IAAU;MAAA;MAAA;MAAA;IAAA;EAAE;IAAA;IAAA;IAAA;EAAA,QAClF;AAEV;AAAC,GAxDQvB,GAAG;AAAA,KAAHA,GAAG;AA0DZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}